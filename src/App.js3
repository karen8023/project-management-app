import { Nav, Navbar, NavItem } from "react-bootstrap";
import "./App.css";
import Routes from "./Routes";
import { API } from "aws-amplify";
import { LinkContainer } from "react-router-bootstrap";
import React, { Component, Fragment } from "react";
import { Auth } from "aws-amplify";
import { Glyphicon } from 'react-bootstrap'
import { Link, withRouter } from "react-router-dom";
import NavMenu from './containers/PageMenu';

class App extends Component {

  constructor(props) {
    super(props);
  
    this.state = {
      //isAuthenticated: false
      isAuthenticated: false,
      isAuthenticating: true,
      isAdmin:false,
      isManager:false,
      user:{}
    };
  }
  
  async componentDidMount() {
     
    //const userInfo = await Auth.currentAuthenticatedUser();
    try {

      await Auth.currentSession();
      this.userHasAuthenticated(true);
      let userInfo = await Auth.currentUserInfo();
      let userFullData = await API.get('notes', 'users/${userInfo.username}');
      if (userFullData.Role === "Admin") {
        this.setState({
            isAdmin: true
        })
    } else if (userFullData.Role === "ProjectManager") {
        this.setState({
            isProjectManager: true
        })
    }
    this.userHasAuthenticated(true);
    }
    catch(e) {
      if (e !== 'No current user') {
        alert(e);
      }
    }
  
    this.setState({ isAuthenticating: false });
  }

  userHasAuthenticated = authenticated => {
    this.setState({ isAuthenticated: authenticated });
  }
  
  handleLogout = async event => {
    await Auth.signOut();
  
    this.userHasAuthenticated(false);
  }
 

  render() {
    const childProps = {
      isAuthenticated: this.state.isAuthenticated,
      isAdmin: this.state.isAdmin,
      isProjectManager: this.state.isProjectManager,
      userHasAuthenticated: this.userHasAuthenticated
    };

    return (
      //!this.state.isAuthenticating &&
      <div className="App container">
        {this.setState.isAuthenticating?
          <Fragment>
          <Glyphicon glyph="refresh" className="spinning" />
          </Fragment>
          :
          <Fragment>
           <NavMenu
                  handleLogOut={this.handleLogOut}
                  isAuthenticated={this.state.isAuthenticated}
                  sAdmin={this.state.isAdmin}
                  isAuthenticating={this.state.isAuthenticating}
                    />
                  <Routes childProps={childProps} />
          </Fragment>
      }
        {/* <Navbar fluid collapseOnSelect>
          <Navbar.Header>
            <Navbar.Brand>
              <Link to="/">Home</Link>&nbsp;&nbsp;&nbsp;&nbsp;
              <Link to="/Project">Projects</Link>&nbsp;&nbsp;&nbsp;&nbsp;
              <Link to="/Engineer">Engineers</Link>
            </Navbar.Brand>
            <Navbar.Toggle />
          </Navbar.Header>
          <Navbar.Collapse>
            <Nav pullRight>
              {this.state.isAuthenticated
                ? <NavItem onClick={this.handleLogout}>Logout</NavItem>
                : <Fragment>
                    <LinkContainer to="/signup">
                      <NavItem>Signup</NavItem>
                    </LinkContainer>
                    <LinkContainer to="/login">
                      <NavItem>Login</NavItem>
                    </LinkContainer>
                  </Fragment>
              }
            </Nav>
          </Navbar.Collapse>
        </Navbar> */}
        <Routes childProps={childProps} />
      </div>
    );
  }
}

//export default App;
export default withRouter(App);
